
List of existing agents and their features which we could implement in our agent:

1. Advantage Actor-Ctitic agent baseline for pysc2 environment. 
    https://github.com/simonmeister/pysc2-rl-agents
    Understanding how to implement reinforcement learning with pysc2 environment. 
    
        
2. UAlbertaBot is a StarCraft C++ bot
  - It makes use of Build order planning that is based on heuristic search. 
  - Real time Simulation - All battles UAlbertaBot encounters are first run through SparCraft combat simultaion system. I
    If the outcome of this simulation is positive then it continues toward the enmy base.
    If the outcome is negative, retreat toward own base. 
  - Stratedy Selection based on results of previous matches. 
  
  Understanding how to implement build order for protoss: https://github.com/davechurchill/ualbertabot/wiki/UAlbertaBot-Build-Orders
  

3. Agent that uses all features maps and structured information to predict actions via A3C algorithm. 
  - Good code to understand lightwieght framework for deep reinforcement learning that uses asynchrounous gradient descent for optimization of deep neural network controllers. 
  - Related paper: https://arxiv.org/pdf/1602.01783.pdf 
  - https://github.com/xhujoy/pysc2-agents/blob/master/agents/a3c_agent.py
  
  
4. Agent that collects Mineral Shards with Deep Q network 
   - understanding preprocessing of replay data: replay_mineral.py
   - create action functions: defeat_zerglings/demo_agent.py
   - https://github.com/chris-chris/pysc2-examples
   
5. Series of tutorials that go step by step on how to build a refined bot
  - https://chatbotslife.com/building-a-basic-pysc2-agent-b109cde1477c
  - https://github.com/skjb/pysc2-tutorial
  
Other agents are:

AIlien
- Zerg
- Decisions are based on the 'scoring' systems (whatever they are).
- state machines for macro-management.

GarmBot

- Blackboard architecture
- Every unit is controlled by a single agent impelemented as a state machine

Ian Nicholas DaCosta

- Protoss
- Genetic algorithms for targeting and enemy threat level detection
- Supervised Learning for opponent strategies detection and build orders

KaonBot

- Competing priority algorithm for the resource/unit allocation
- Plans to learn the priorities from human replays in the future

Krasi0bot

- Old but active
- Genetic algorithms, neural nets and potential fields

LetaBot

- SSCAIT2017 winner
- MCTS for the movement of squads
- cooperative pathfinding for resource gathering
- text mining to extract build orders from Liquidpedia

MegaBot, [13]

- Three different bots in one (Skynet, Xelnaga, NUSBot)
- multi-armed bandit problem for one of the three bots selection
-1/0/1 reward for one game
- q-learning update rule for the above problem

Monica/Maria/Brenda

- Protoss/Terrain
- Uses TorchCraft[12]

PurpleWave

- Hierarchical task networks
- Hybrid squad/multi-agent approach and nearest neighbour clustering for micromanagement
- simulation of the outcomes and min-max of the tactical approaches
- each unit behaves independently, but is advised by the decision mentioned above
- ~24 stateles behaviours
- heuristics (including potential fields) for the motion

StarcraftGP, [14]

- heuristic and rule-based
- remembering opponent's strategy and using it in the future
